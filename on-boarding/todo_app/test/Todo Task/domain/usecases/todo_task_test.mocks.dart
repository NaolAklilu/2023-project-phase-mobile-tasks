// Mocks generated by Mockito 5.4.2 from annotations
// in todo_app/test/Todo%20Task/domain/usecases/set_date_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/core/error/failures.dart' as _i5;
import 'package:todo_app/Todo%20Task/domain/entities/task_domain.dart' as _i6;
import 'package:todo_app/Todo%20Task/domain/repositories/todo_app_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodoAppRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoAppRepository extends _i1.Mock implements _i3.TodoAppRepository {
  MockTodoAppRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskDomain>> setDate(
    int? index,
    String? dateTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDate,
          [
            index,
            dateTime,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TaskDomain>>.value(
            _FakeEither_0<_i5.Failure, _i6.TaskDomain>(
          this,
          Invocation.method(
            #setDate,
            [
              index,
              dateTime,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TaskDomain>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskDomain>> markCompletion(
          int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #markCompletion,
          [index],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TaskDomain>>.value(
            _FakeEither_0<_i5.Failure, _i6.TaskDomain>(
          this,
          Invocation.method(
            #markCompletion,
            [index],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TaskDomain>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskDomain>> addTask(
          _i6.TaskDomain? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TaskDomain>>.value(
            _FakeEither_0<_i5.Failure, _i6.TaskDomain>(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TaskDomain>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskDomain>>> getAllTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskDomain>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.TaskDomain>>(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskDomain>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskDomain>> getTask(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTask,
          [index],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TaskDomain>>.value(
            _FakeEither_0<_i5.Failure, _i6.TaskDomain>(
          this,
          Invocation.method(
            #getTask,
            [index],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TaskDomain>>);
}
