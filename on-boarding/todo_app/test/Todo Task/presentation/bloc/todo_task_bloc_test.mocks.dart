// Mocks generated by Mockito 5.4.2 from annotations
// in todo_app/test/Todo%20Task/presentation/bloc/todo_task_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/core/error/failures.dart' as _i6;
import 'package:todo_app/Todo%20Task/domain/entities/task_domain.dart' as _i7;
import 'package:todo_app/Todo%20Task/domain/repositories/todo_app_repository.dart'
    as _i2;
import 'package:todo_app/Todo%20Task/domain/usecases/create_task.dart' as _i4;
import 'package:todo_app/Todo%20Task/domain/usecases/get_all_tasks.dart' as _i9;
import 'package:todo_app/Todo%20Task/domain/usecases/get_task.dart' as _i8;
import 'package:todo_app/Todo%20Task/domain/usecases/mark_completion.dart'
    as _i11;
import 'package:todo_app/Todo%20Task/domain/usecases/set_date.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoAppRepository_0 extends _i1.SmartFake
    implements _i2.TodoAppRepository {
  _FakeTodoAppRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CreateTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTask extends _i1.Mock implements _i4.CreateTask {
  MockCreateTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoAppRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTodoAppRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TodoAppRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.TaskDomain>> call(
          _i4.CreateTaskParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.TaskDomain>>.value(
            _FakeEither_1<_i6.Failure, _i7.TaskDomain>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.TaskDomain>>);
}

/// A class which mocks [GetTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTask extends _i1.Mock implements _i8.GetTask {
  MockGetTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoAppRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTodoAppRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TodoAppRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.TaskDomain>> call(
          _i8.GetTaskParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.TaskDomain>>.value(
            _FakeEither_1<_i6.Failure, _i7.TaskDomain>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.TaskDomain>>);
}

/// A class which mocks [GetAllTasks].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTasks extends _i1.Mock implements _i9.GetAllTasks {
  MockGetAllTasks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoAppRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTodoAppRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TodoAppRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.TaskDomain>>> call(
          _i9.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.TaskDomain>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.TaskDomain>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.TaskDomain>>>);
}

/// A class which mocks [SetDate].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetDate extends _i1.Mock implements _i10.SetDate {
  MockSetDate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoAppRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTodoAppRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TodoAppRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.TaskDomain>> call(
          _i10.SetDateParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.TaskDomain>>.value(
            _FakeEither_1<_i6.Failure, _i7.TaskDomain>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.TaskDomain>>);
}

/// A class which mocks [MarkCompletion].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarkCompletion extends _i1.Mock implements _i11.MarkCompletion {
  MockMarkCompletion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoAppRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTodoAppRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TodoAppRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.TaskDomain>> call(
          _i11.MarkCompletionParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.TaskDomain>>.value(
            _FakeEither_1<_i6.Failure, _i7.TaskDomain>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.TaskDomain>>);
}
